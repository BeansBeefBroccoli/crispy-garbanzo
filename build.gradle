buildscript {
    repositories {
        maven {
            name = "ForgeGradle Maven"
            url = "https://maven.minecraftforge.net"
            }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
    }
}
apply plugin: "net.minecraftforge.gradle"
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: "eclipse"
apply plugin: "maven-publish"

version = "${mod_version}"
group = "${mod_base_package}.${mod_id}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch"))
minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    runs {
        client {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"

            property "forge.logging.console.level", "debug"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"

            property "forge.logging.console.level", "debug"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"

            property "forge.logging.console.level", "debug"

            args "--mod", mod_id, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir "src/generated/resources"
}

repositories {
    maven {
        url =    "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
    }
/*
    maven {
        url "https://repo.repsy.io/mvn/fadookie/particleman"
    }
*/
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url = "https://maven.tehnut.info"
    }
    maven {
        url = "https://jitpack.io"
        }
    maven {
        url = "https://maven.tterrag.com/"
    }
    maven {
        url = "https://maven.blamejared.com"
    }
    maven {
        url = "https://modmaven.dev/"
        content {
            includeGroup "blusunrize.immersiveengineering"
//          includeGroup "malte0811"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"

    implementation fg.deobf("com.github.bernie-g:Techarium:master-SNAPSHOT")
    implementation fg.deobf("software.bernie.geckolib:${geckolib_version}")

    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")
    implementation fg.deobf("curse.maven:mekanism-268560:${mekanism_version}")
    implementation fg.deobf("curse.maven:theoneprobe-245211:${one_probe_version}")
    implementation fg.deobf("com.blamejared.crafttweaker:CraftTweaker-1.16.5:$crafttweaker_version")
    implementation fg.deobf("curse.maven:mystical-agriculture-246640:${mystical_agriculture_version}")
    implementation fg.deobf("curse.maven:cucumber-272335:${cucumber_version}")
    implementation fg.deobf("curse.maven:pams-harvestcraft-2-crops-361385:${pams_harvestcraft_2_crops_version}")
    implementation fg.deobf("curse.maven:thermal-cultivation-271835:${thermal_cultivation_version}")
    implementation fg.deobf("curse.maven:thermal-foundation-222880:${thermal_foundation_version}")
    implementation fg.deobf("curse.maven:xl-food-mod-plus-448703:${xl_food_plus_version}")
    implementation fg.deobf("curse.maven:farmers-delight-398521:${farmers_delight_version}")
    implementation fg.deobf("curse.maven:oh-the-biomes-youll-go-247560:${oh_the_biomes_youll_go_version}")
    implementation fg.deobf("curse.maven:biomes-o-plenty-220318:${biomes_o_plenty_version}")
    implementation fg.deobf("curse.maven:ctm-267602:${ctm_version}")
    implementation fg.deobf("com.simibubi.create:Create:${create_version}")
    implementation fg.deobf("com.jozufozu.flywheel:Flywheel:${flywheel_version}")
    implementation fg.deobf("slimeknights.tconstruct:tconstruct:${tconstruct_version}")
    implementation fg.deobf("slimeknights.mantle:Mantle:${mantle_version}")
    implementation fg.deobf("com.teamcofh:CoFHCore:${cofh_core_version}")
    compileOnly fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${immersive_engineering_version}")
    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}:api")
    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")
}

def resource_targets = ["META-INF/mods.toml", "pack.mcmeta"]
task replaceResources(type: Copy) {
//  dependsOn(jar)
    outputs.upToDateWhen { false }
    def spec = copySpec {
        from(sourceSets.main.resources) {
            include resource_targets
            expand "project": project, "mod_id": mod_id, "mod_name": mod_name, "mod_version": mod_version,
                    "mod_authors": mod_authors, "mod_description": mod_description,
                    "display_url": display_url,
                    "issue_tracker_url": issue_tracker_url,
                    "license": license,
                    "forge_version_range": forge_version_range, "minecraft_version_range": minecraft_version_range,
                    "loader_version_range": loader_version_range,
                    "pack_format": pack_format
        }
    }
    with spec
    into "$buildDir/resources/main/"
    if (new File("$rootDir/out/production/${project.name}.main/").exists()) {
        copy {
            with spec
            into "$rootDir/out/production/${project.name}.main/"
        }
    }

    if (new File("$rootDir/bin/main/").exists()) {
        copy {
            with spec
            into "$rootDir/bin/main/"
        }
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_id,
            "Specification-Vendor": mod_authors,
            "Specification-Version": "1.0.0",
            "Implementation-Title": project.name,
            "Implementation-Version": mod_version,
            "Implementation-Vendor": mod_authors,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy("reobfJar")
